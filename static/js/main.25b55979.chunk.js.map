{"version":3,"sources":["stores/detail.ts","stores/diagram.ts","algorithms/subgraph-search.ts","algorithms/subgraph-search-rpc.ts","stores/patterns.ts","themes.ts","stores/index.ts","context.tsx","components/PatternDiagram.tsx","components/PatternList.tsx","algorithms/viewbox.ts","components/Scatter.tsx","algorithms/layout.ts","algorithms/mds.ts","algorithms/pre-process.ts","local-server-api.ts","components/AppHeader.tsx","components/ControlPanel.tsx","components/PatternDetailDiagram.tsx","views/DetailView.tsx","algorithms/contour/contour-mesh-helpers.ts","algorithms/contour/heightmap-calculator.ts","algorithms/contour/stop-calculator.ts","algorithms/contour/contour-blur.ts","components/Contour.tsx","components/ContourContainer.tsx","views/DiagramView.tsx","components/Panel.tsx","views/Visualization.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DetailStore","_dec","action","bound","_class","parent","Object","classCallCheck","this","initializerDefineProperty","_descriptor","createClass","key","value","nodes","selectedNodes","get","patternStore","selectedPatternId","subgraphs","searchedSubgraphs","length","lbSet","Set","map","d","label","graphData","filter","has","index","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","computed","DiagramStore","diagram_dec","_dec2","_dec3","_dec4","_dec5","diagram_class","diagram_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","val","showContour","showDiagram","showDiagramEdge","filterOutMode","contour","kernelRadius","searchSubgraphs","graph","subgraph","tolerance","arguments","undefined","console","time","lcnt","forEach","nodeSet","selectedEdges","links","source","target","seqs","visited","got","dfs","s","push","slice","pop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","e","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","timeEnd","subgs","seq","searchedNodes","eFinger","concat","patternFinger","ecnt","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","pe","nds","st","es","secnt","ef","s1","s2","res","x","v","Math","max","calc","BASE_URL","transform","objectSpread","_callee","regenerator_default","a","wrap","_context","prev","axios","post","then","log","data","abrupt","stop","PatternStore","patterns_dec","patterns_dec2","patterns_dec3","patterns_class","patterns_descriptor","patterns_descriptor2","patterns_descriptor3","patterns_descriptor4","patterns_descriptor5","searchTolerance","p","selectedPatternNodes","hoveredPattern","searched","graphEdgeArrayCopy","_x","_x2","_x3","_searchSubgraphs","apply","rpc","lst","g","styles","headers","background","borderBottom","boxShadow","list","overflowY","maxHeight","window","innerHeight","left","height","borderRight","borderLeft","content","display","flexWrap","panel","padding","margin","borderRadius","panelTitle","color","userSelect","textTransform","colors","normal","highlighted","AppStore","stores_dec","stores_class","stores_descriptor","stores_descriptor2","stores_descriptor3","stores_descriptor4","stores_descriptor5","_setData","asyncToGenerator","mark","_this","detailStore","hitNodeLabels","theme","diagramNodeStyle","diagram","patterns","detail","createStore","storeContext","React","createContext","StoreProvider","_ref","children","store","useLocalStore","react_default","createElement","Provider","useStore","useContext","Error","observer","pattern","showLabel","showEdge","width","viewPort","colorMapping","onClickNode","brushable","_ref$radius","radius","graphContent","clickableSty","cursor","onClick","useCallback","nd","svgRef","useRef","useEffect","d3","current","append","attr","call","extent","on","selection","fill","getFill","nodeElements","style","cx","cy","y","r","nodeGroup","className","labelGroup","labelElements","edgeGroup","edgeElements","u","x1","y1","x2","y2","strokeWidth","stroke","strokeOpacity","viewBox","join","sty","ref","props","_props$width","_props$height","match","sset","tset","_i","_slst","Array","from","size","react","sw","min","sh","border","onUnHoverPattern","setPatternHover","pts","i","theStyle","selectPattern","onClickPattern","onMouseEnter","onHoverPattern","onMouseLeave","components_PatternDiagram","getViewboxOfOne","off","minx","Infinity","miny","maxx","maxy","Scatter","points","coords","vbox","onUnHover","elems","matched","doLayout","iters","_","features","edges","sim","force","tick","mdsOnData","matrix","dimensions","distances","numeric","mul","M","pow","mean","A","div","add","rowMeans","colMeans","transpose","totalMean","j","ret","svd","eigenValues","sqrt","S","U","row","splice","mds","mat","v1","v2","sqrEuDist","processGraph","coords2","viewbox","graphs","getViewbox","feature","sent","_callee2","graphName","_context2","Option","Header","_React$useState","useState","_React$useState2","slicedToArray","sourceList","setSourceList","_React$useState3","_React$useState4","dataSource","setDataSource","_getGraphList","getGraphList","loadData","_getGraph","getGraph","setData","options","es_row","gutter","col","span","es_select","onSelect","es_button","type","switch","radio","lineHeight","ControlPanel","_useStore","diagramStore","es_switch","checked","checkedChildren","onChange","setShowDiagram","setShowContour","setShowDiagramEdge","es_radio","Group","setFilterOutMode","slider","setContourRadius","step","setSearchTolerance","DetailView","nodeColor","nodeColorMapper","setSelectedNodes","flexDirection","hits","components_PatternDetailDiagram","material","THREE","vertexShader","fragmentShader","blending","blendSrc","blendDst","createContourMesh","geom","vertices","uvs","indices","idx","_d$intensity","intensity","setIndex","addAttribute","createDotBufferGeometry","computeBoundingBox","createContourSceneData","mesh","cambox","delta","adjustCamera","camera","position","set","HeightCalculator","sizeX","sizeY","renderer","rt","init","setRenderTarget","setClearColor","bufferScene","clearTarget","render","extensions","capabilities","maxVertexTextures","error","wrapS","wrapT","minFilter","magFilter","format","stencilBuffer","depthBuffer","StopCalculator","hCalc","minInterval","buffer","Float32Array","SampleSize","fracs","calculate","ss","readRenderTargetPixels","getRenderTarget","pickStops","maxVal","arr","mv","len","sort","b","round","vShader","ContourBlurer","heightmapCalculator","NSTOPS","stopCalculator","stops","tmpRt","tmpMesh","param","contourSceneData","levels","frac","autoClear","clearColor","sceneData","uniforms","hmap","texture","bmap","tmpScene","tmpCamera","defs","trans","getColorFunc","fShaderCode","uniforms2","tex","Contour","refs","scene","frameId","blurer","setupRenderer","setupCalculator","setupScene","updateScene","updateFrame","cancelAnimationFrame","remove","geometry","dispose","state","canvas","viewCanvas","clear","requestAnimationFrame","bind","_this$props","onWheel","draw","dots","Contour_Contour","DiagramView","back","overflow","top","front","zIndex","searchSubgraphNodes","components_ContourContainer","Panel","title","toJS","Content","Visualization","Visualization_Header","AppHeader","components_Panel","views_DiagramView","components_PatternList","components_Scatter","views_DetailView","components_ControlPanel","process","context_StoreProvider","views_Visualization","Boolean","location","hostname","configure","enforceActions","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25b55979.chunk.js","sourcesContent":["import { action, computed, observable } from 'mobx';\r\nimport { AppStore } from '.';\r\n\r\nexport class DetailStore {\r\n    @observable selectedNodes: any[] = [];\r\n\r\n    constructor(private parent: AppStore) {}\r\n\r\n    @action.bound\r\n    setSelectedNodes(nodes: any[]) {\r\n        this.selectedNodes = nodes;\r\n    }\r\n\r\n    @computed\r\n    get pattern() {\r\n        if (this.parent.patternStore.selectedPatternId === null) {\r\n            return null;\r\n        } else {\r\n            return this.parent.patternStore.subgraphs[this.parent.patternStore.selectedPatternId];\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get hits() {\r\n        if (this.parent.patternStore.selectedPatternId === null) {\r\n            return 0;\r\n        } else {\r\n            return (this.parent.patternStore.searchedSubgraphs as any).length;\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get hitNodes() {\r\n        const lbSet = new Set(this.selectedNodes.map((d) => d.label));\r\n        return new Set(this.parent.graphData.nodes.filter((d) => lbSet.has(d.label)).map((d) => d.index));\r\n    }\r\n\r\n    @computed\r\n    get hitNodeLabels() {\r\n        return new Set(this.selectedNodes.map((d) => d.label));\r\n    }\r\n}\r\n","import { action, observable } from 'mobx';\r\nimport { AppStore } from '.';\r\n\r\nexport interface IContourParam {\r\n    kernelRadius: number;\r\n}\r\n\r\nexport class DiagramStore {\r\n    @observable showContour = true;\r\n\r\n    @observable showDiagram = true;\r\n    @observable showDiagramEdge = false;\r\n    @observable filterOutMode = 0;\r\n\r\n    @observable contour: IContourParam = {\r\n        kernelRadius: 64,\r\n    };\r\n\r\n    constructor(private parent: AppStore) {}\r\n\r\n    @action.bound\r\n    setShowContour(val: boolean) {\r\n        this.showContour = val;\r\n    }\r\n\r\n    @action.bound\r\n    setShowDiagram(val: boolean) {\r\n        this.showDiagram = val;\r\n    }\r\n\r\n    @action.bound\r\n    setShowDiagramEdge(val: boolean) {\r\n        this.showDiagramEdge = val;\r\n    }\r\n\r\n    @action.bound\r\n    setFilterOutMode(val: number) {\r\n        this.filterOutMode = val;\r\n    }\r\n\r\n    @action.bound setContourRadius(val: number) {\r\n        this.contour.kernelRadius = val;\r\n    }\r\n}\r\n","interface INode {\r\n    index: number;\r\n    label: string;\r\n}\r\n\r\ninterface IEdge {\r\n    index: number;\r\n    source: INode;\r\n    target: INode;\r\n}\r\n\r\ninterface IGraph {\r\n    nodes: INode[];\r\n    links: IEdge[];\r\n}\r\n\r\nexport function searchSubgraphs(graph: IGraph, subgraph: IGraph, tolerance: number = 0) {\r\n    console.time('search subgraph');\r\n\r\n    const lcnt: any = {};\r\n    subgraph.nodes.forEach((d) => {\r\n        if (!lcnt[d.label]) {\r\n            lcnt[d.label] = 1;\r\n        } else {\r\n            lcnt[d.label] += 1;\r\n        }\r\n    });\r\n\r\n    const selectedNodes = graph.nodes.filter((d) => lcnt[d.label]);\r\n\r\n    const nodeSet = new Set(selectedNodes.map((d) => d.index));\r\n\r\n    const selectedEdges = graph.links.filter((d) => nodeSet.has(d.source.index) && nodeSet.has(d.target.index));\r\n\r\n    console.time('dfs');\r\n    const seqs: any[] = [];\r\n    let visited: any = {};\r\n    let got: any = {};\r\n    const dfs = (d: INode, s: any[] = []) => {\r\n        if (!got[d.label]) {\r\n            got[d.label] = 0;\r\n        }\r\n        if (got[d.label] >= (lcnt[d.label] || 0)) {\r\n            return false;\r\n        }\r\n        got[d.label] += 1;\r\n        visited[d.index] = true;\r\n        s.push(d.index);\r\n\r\n        if (s.length === subgraph.nodes.length) {\r\n            seqs.push(s.slice(0));\r\n            s.pop();\r\n            got[d.label] -= 1;\r\n            return true;\r\n        }\r\n\r\n        for (const e of selectedEdges) {\r\n            if (e.source.index === d.index) {\r\n                if (!visited[e.target.index]) {\r\n                    dfs(e.target, s);\r\n                }\r\n            } else if (e.target.index === d.index) {\r\n                if (!visited[e.source.index]) {\r\n                    dfs(e.source, s);\r\n                }\r\n            }\r\n        }\r\n\r\n        s.pop();\r\n        got[d.label] -= 1;\r\n        return true;\r\n    };\r\n\r\n    for (const d of selectedNodes) {\r\n        visited = [];\r\n        got = {};\r\n        dfs(d, []);\r\n    }\r\n\r\n    console.timeEnd('dfs');\r\n    const subgs = seqs.map((seq) => {\r\n        return seq.map((d: any) => graph.nodes[d]);\r\n    });\r\n\r\n    const searchedNodes: any[] = [];\r\n\r\n    const eFinger = (e: any) => {\r\n        if (e.source.label < e.target.label) {\r\n            return `l_${e.source.label}$${e.target.label}`;\r\n        } else {\r\n            return `l_${e.target.label}$${e.source.label}`;\r\n        }\r\n    };\r\n\r\n    const patternFinger = subgraph.links.map(eFinger);\r\n    const ecnt: any = {};\r\n\r\n    for (const pe of patternFinger) {\r\n        if (!ecnt[pe]) {\r\n            ecnt[pe] = 1;\r\n        } else {\r\n            ecnt[pe] += 1;\r\n        }\r\n    }\r\n\r\n    const calc = (s1: any, s2: any) => {\r\n        let res = 0;\r\n        for (const x in s1) {\r\n            const v = s2[x] || 0;\r\n            res += Math.max(s1[x] - v, 0);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    subgs.forEach((nds) => {\r\n        const st = new Set(nds.map((d: any) => d.index));\r\n        const es = selectedEdges.filter((e) => st.has(e.source.index) && st.has(e.target.index));\r\n\r\n        const secnt: any = {};\r\n        es.forEach((e) => {\r\n            const ef = eFinger(e);\r\n            secnt[ef] = (secnt[ef] || 0) + 1;\r\n        });\r\n\r\n        const score = calc(ecnt, secnt);\r\n\r\n        if (!(score > subgraph.links.length * tolerance)) {\r\n            searchedNodes.push(nds.slice());\r\n        }\r\n    });\r\n\r\n    console.timeEnd('search subgraph');\r\n\r\n    return searchedNodes;\r\n\r\n    // for (let i = 0; i < selectedNodes.length; ++i) {\r\n    //     for (let i = 0; i < )\r\n    // }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:3000/api/alg/';\r\n\r\ninterface INode {\r\n    index: number;\r\n    label: string;\r\n}\r\n\r\ninterface IEdge {\r\n    index: number;\r\n    source: INode;\r\n    target: INode;\r\n}\r\n\r\ninterface IGraph {\r\n    nodes: INode[];\r\n    links: IEdge[];\r\n}\r\n\r\nfunction transform(graph: IGraph) {\r\n    return {\r\n        ...graph,\r\n        links: graph.links.map((e) => ({\r\n            source: e.source.index,\r\n            target: e.target.index,\r\n        })),\r\n    };\r\n}\r\n\r\nexport async function searchSubgraphs(graph: IGraph, subgraph: IGraph, tolerance: number) {\r\n    console.time('search subgraph via server');\r\n\r\n    await axios\r\n        .post(`${BASE_URL}/search_subgraph`, {\r\n            graph: transform(graph),\r\n            subgraph: transform(subgraph),\r\n            tolerance,\r\n        })\r\n        .then((d) => {\r\n            console.log(d.data);\r\n        });\r\n    console.timeEnd('search subgraph via server');\r\n\r\n    return 0;\r\n}\r\n","import { action, computed, observable } from 'mobx';\r\nimport { AppStore } from '.';\r\nimport { searchSubgraphs } from '../algorithms/subgraph-search';\r\nimport { searchSubgraphs as rpc } from '../algorithms/subgraph-search-rpc';\r\n\r\nexport class PatternStore {\r\n    @observable subgraphs: any[] = [];\r\n\r\n    @observable searchTolerance = 0;\r\n    @observable selectedPatternId: number | null = null;\r\n    @observable selectedPatternNodes: Set<string> | null = null;\r\n    @observable hoveredPattern: number | null = null;\r\n\r\n    constructor(private parent: AppStore) {}\r\n\r\n    @action.bound\r\n    setSearchTolerance(val: number) {\r\n        this.searchTolerance = val;\r\n    }\r\n\r\n    @action.bound\r\n    selectPattern(p: any) {\r\n        if (p === null) {\r\n            this.selectedPatternId = null;\r\n            this.selectedPatternNodes = null;\r\n        } else {\r\n            this.selectedPatternId = p.index;\r\n            this.selectedPatternNodes = new Set(p.nodes.map((d: any) => d.label));\r\n        }\r\n    }\r\n\r\n    @action.bound public setPatternHover(val: number | null) {\r\n        this.hoveredPattern = val;\r\n    }\r\n\r\n    @computed public get searchedSubgraphs() {\r\n        if (this.selectedPatternId !== null) {\r\n            const p = this.subgraphs[this.selectedPatternId];\r\n\r\n            const searched = searchSubgraphs({ nodes: this.parent.graphData.nodes, links: this.parent.graphEdgeArrayCopy }, p, this.searchTolerance);\r\n            rpc({ nodes: this.parent.graphData.nodes, links: this.parent.graphEdgeArrayCopy }, p, this.searchTolerance);\r\n\r\n            return searched;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @computed public get searchSubgraphNodes() {\r\n        const lst: any = [];\r\n        if (this.searchedSubgraphs) {\r\n            this.searchedSubgraphs.forEach((g) => {\r\n                g.forEach((d: any) => {\r\n                    lst.push(d.index);\r\n                });\r\n            });\r\n            return new Set(lst);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","// const bg = '#f0f2f5';\r\nconst bg = '#fff';\r\n\r\nconst styles = {\r\n    headers: {\r\n        background: bg,\r\n        // height: 54,\r\n        borderBottom: '1px silver solid',\r\n        boxShadow: '#ccc 0px 1px 5px',\r\n    },\r\n    list: {\r\n        overflowY: 'auto',\r\n        maxHeight: window.innerHeight - 80 - 400,\r\n    } as React.CSSProperties,\r\n    left: {\r\n        height: '100%',\r\n        background: bg,\r\n        overflowY: 'auto',\r\n        borderRight: '#ccc 1px solid',\r\n        borderLeft: '#ccc 1px solid',\r\n    } as React.CSSProperties,\r\n    content: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    panel: {\r\n        padding: 10,\r\n        margin: 10,\r\n        boxShadow: '#ccc 0 0 10px',\r\n        borderRadius: 5,\r\n    },\r\n    panelTitle: {\r\n        color: 'steelblue',\r\n        userSelect: 'none',\r\n        textTransform: 'uppercase',\r\n    },\r\n};\r\n\r\nconst colors = {\r\n    normal: '#f4a460',\r\n    highlighted: '#ff4500',\r\n};\r\n\r\nexport function makeTheme() {\r\n    return {\r\n        styles,\r\n        diagramNodeStyle: colors,\r\n    };\r\n}\r\n","import { action, computed, observable } from 'mobx';\r\nimport * as detail from './detail';\r\nimport * as diagram from './diagram';\r\nimport * as patterns from './patterns';\r\n\r\nimport { makeTheme } from '../themes';\r\n\r\nexport class AppStore {\r\n    @observable public graphData: any = null;\r\n\r\n    @observable public diagramStore = new diagram.DiagramStore(this);\r\n    @observable public patternStore = new patterns.PatternStore(this);\r\n    @observable public detailStore = new detail.DetailStore(this);\r\n\r\n    @observable public theme = makeTheme();\r\n\r\n    public graphEdgeArrayCopy: any = [];\r\n\r\n    @action.bound public async setData(data) {\r\n        this.graphEdgeArrayCopy = data.graph.links.map((e: any) => ({\r\n            ...e,\r\n            source: data.graph.nodes[e.source],\r\n            target: data.graph.nodes[e.target],\r\n        }));\r\n        this.graphData = data.graph;\r\n        this.patternStore.subgraphs = data.subgs;\r\n    }\r\n\r\n    @computed get nodeColorMapper() {\r\n        // if (this.diagramStore.filterOutMode === 0) {\r\n        //     const mapper = (d: any) => {\r\n        //         const spn = this.patternStore.selectedPatternNodes;\r\n        //         if (spn !== null) {\r\n        //             return spn.has(d.label) ? this.theme.diagramNodeStyle.highlighted : this.theme.diagramNodeStyle.normal;\r\n        //         } else {\r\n        //             return this.theme.diagramNodeStyle.normal;\r\n        //         }\r\n        //     };\r\n\r\n        //     return mapper;\r\n        // } else {\r\n        const st = this.detailStore.hitNodeLabels;\r\n        const mapper = (d: any) => {\r\n            return st.has(d.label) ? this.theme.diagramNodeStyle.highlighted : this.theme.diagramNodeStyle.normal;\r\n        };\r\n\r\n        return mapper;\r\n        // }\r\n    }\r\n}\r\n\r\nexport const createStore = () => new AppStore();\r\nexport type TStore = ReturnType<typeof createStore>;\r\n","import { useLocalStore } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { createStore, TStore } from './stores';\r\n\r\nexport const storeContext = React.createContext<TStore | null>(null);\r\n\r\nexport const StoreProvider: React.FC = ({ children }) => {\r\n    const store = useLocalStore(createStore);\r\n\r\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>;\r\n};\r\n\r\nexport const useStore = () => {\r\n    const store = React.useContext(storeContext);\r\n    if (!store) {\r\n        throw new Error('No store provided!');\r\n    }\r\n    return store;\r\n};\r\n","import * as d3 from 'd3';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nexport interface IProps {\r\n    pattern?: any;\r\n\r\n    width?: number;\r\n    height?: number;\r\n\r\n    radius?: number;\r\n\r\n    showLabel?: boolean;\r\n\r\n    showEdge?: boolean;\r\n\r\n    colorMapping?: string | ((d: any) => string);\r\n\r\n    background?: string;\r\n\r\n    viewPort: [number, number, number, number];\r\n\r\n    onClickNode?: (d: any) => void;\r\n\r\n    brushable?: boolean;\r\n}\r\n\r\nconst PatternDiagram: React.SFC<IProps> = ({\r\n    pattern,\r\n    showLabel,\r\n    showEdge,\r\n    width,\r\n    height,\r\n    viewPort,\r\n    background,\r\n    colorMapping,\r\n    onClickNode,\r\n    brushable,\r\n    radius = 5,\r\n}) => {\r\n    let graphContent = <g />;\r\n\r\n    const clickableSty = {\r\n        cursor: onClickNode ? 'pointer' : 'default',\r\n    };\r\n\r\n    const onClick = React.useCallback(\r\n        (nd: any) => {\r\n            if (onClickNode) {\r\n                onClickNode(nd);\r\n            }\r\n        },\r\n        [onClickNode],\r\n    );\r\n\r\n    const svgRef = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        if (brushable) {\r\n            const brushed = () => {\r\n                console.log(d3.event.selection);\r\n            };\r\n\r\n            d3.select(svgRef.current)\r\n                .append('g')\r\n                .attr('class', 'brush')\r\n                .call(\r\n                    d3\r\n                        .brush()\r\n                        .extent([[-100, 100], [-100, 100]])\r\n                        .on('brush', brushed),\r\n                );\r\n        }\r\n    });\r\n\r\n    if (pattern) {\r\n        const fill = colorMapping === undefined ? 'orange' : colorMapping;\r\n\r\n        const getFill = (d: any) => {\r\n            if (typeof fill === 'string') {\r\n                return fill;\r\n            } else {\r\n                return fill(d);\r\n            }\r\n        };\r\n\r\n        const nodeElements = pattern.nodes.map((d: any) => {\r\n            return <circle style={clickableSty} key={`n${d.index}`} cx={d.x} cy={d.y} r={radius} fill={getFill(d)} onClick={() => onClick(d)} />;\r\n        });\r\n\r\n        const nodeGroup = <g className='nodes'>{nodeElements}</g>;\r\n\r\n        let labelGroup: any = null;\r\n        if (showLabel) {\r\n            const labelElements = pattern.nodes.map((d: any) => {\r\n                return (\r\n                    <text key={`l${d.index}`} x={d.x} y={d.y}>\r\n                        {d.label}\r\n                    </text>\r\n                );\r\n            });\r\n\r\n            labelGroup = <g className='labels'>{labelElements}</g>;\r\n        }\r\n\r\n        let edgeGroup: any = null;\r\n        if (showEdge) {\r\n            const edgeElements = pattern.links.map((e: any) => {\r\n                const u = e.source;\r\n                const v = e.target;\r\n\r\n                return <line key={`e${e.index}`} x1={u.x} y1={u.y} x2={v.x} y2={v.y} strokeWidth={0.3} stroke={'darkgrey'} strokeOpacity={0.9} />;\r\n            });\r\n\r\n            edgeGroup = <g className='edges'>{edgeElements}</g>;\r\n        }\r\n\r\n        graphContent = (\r\n            <g className='content'>\r\n                {edgeGroup}\r\n                {nodeGroup}\r\n                {labelGroup}\r\n            </g>\r\n        );\r\n    }\r\n\r\n    const viewBox = viewPort.join(' ');\r\n    const sty: any = {\r\n        display: 'inline-block',\r\n        margin: '0 auto',\r\n        width: `${width}px`,\r\n        height: `${height}px`,\r\n    };\r\n\r\n    if (background !== undefined) {\r\n        sty.background = background;\r\n    }\r\n\r\n    return (\r\n        <svg style={sty} viewBox={viewBox} ref={svgRef}>\r\n            {graphContent}\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default observer(PatternDiagram);\r\n","import { observer } from 'mobx-react';\r\nimport * as React from 'react';\r\nimport { useStore } from '../context';\r\n\r\nimport Diagram from './PatternDiagram';\r\n\r\nexport interface IProps {\r\n    patterns: any[];\r\n\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nconst PatternList: React.SFC<IProps> = (props) => {\r\n    const store = useStore();\r\n\r\n    const { patterns, width = 100, height = 100 } = props;\r\n\r\n    const match = React.useCallback(\r\n        (pattern: { nodes: Array<{ label: string }> }) => {\r\n            const sset = store.patternStore.selectedPatternNodes;\r\n            if (!sset) {\r\n                return false;\r\n            }\r\n\r\n            const tset = new Set(pattern.nodes.map((d) => d.label));\r\n            let v = 0;\r\n            const slst = Array.from(sset);\r\n            for (const s of slst) {\r\n                if (tset.has(s)) {\r\n                    ++v;\r\n                }\r\n            }\r\n\r\n            return v === sset.size && v === tset.size;\r\n        },\r\n        [store.patternStore.selectedPatternNodes],\r\n    );\r\n\r\n    let graphContent = <div />;\r\n\r\n    if (patterns) {\r\n        const sw = Math.min(width, height);\r\n        const sh = sw;\r\n\r\n        const style: any = {\r\n            display: 'inline-block',\r\n            border: '#5a5a5a 1px solid',\r\n            margin: 5,\r\n            padding: 1,\r\n        };\r\n\r\n        const onClickPattern = (p: any) => {\r\n            if (match(p)) {\r\n                store.patternStore.selectPattern(null);\r\n            } else {\r\n                store.patternStore.selectPattern(p);\r\n            }\r\n        };\r\n\r\n        const onHoverPattern = (p: any) => {\r\n            store.patternStore.setPatternHover(p.index);\r\n        };\r\n        const onUnHoverPattern = () => {\r\n            store.patternStore.setPatternHover(null);\r\n        };\r\n\r\n        const pts = patterns.map((p, i) => {\r\n            let theStyle = style;\r\n\r\n            if (store.patternStore.selectedPatternNodes) {\r\n                if (match(p)) {\r\n                    theStyle = {\r\n                        display: 'inline-block',\r\n                        background: '#a0d8ef',\r\n                        border: '#5a5a5a 1px solid',\r\n                        margin: 5,\r\n                        padding: 1,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (p.index === store.patternStore.hoveredPattern) {\r\n                theStyle = {\r\n                    ...theStyle,\r\n                    border: '#96514d 1px solid',\r\n                    boxShadow: '#ccc 0px 0px 3px',\r\n                };\r\n            }\r\n\r\n            return (\r\n                <div key={p.index} style={theStyle} onClick={() => onClickPattern(p)} onMouseEnter={() => onHoverPattern(p)} onMouseLeave={onUnHoverPattern}>\r\n                    <Diagram pattern={p} showLabel={true} showEdge={true} width={sw} height={sh} viewPort={p.viewBox} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        graphContent = <div>{pts}</div>;\r\n    }\r\n\r\n    return <div>{graphContent}</div>;\r\n};\r\n\r\nexport default observer(PatternList);\r\n","interface INode {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface IGraph {\r\n    nodes: INode[];\r\n}\r\n\r\nexport function getViewboxOfOne(graph: IGraph, off = 2) {\r\n    let minx = Infinity;\r\n    let miny = Infinity;\r\n    let maxx = -Infinity;\r\n    let maxy = -Infinity;\r\n\r\n    graph.nodes.forEach((d) => {\r\n        minx = Math.min(minx, d.x);\r\n        miny = Math.min(miny, d.y);\r\n        maxx = Math.max(maxx, d.x);\r\n        maxy = Math.max(maxy, d.y);\r\n    });\r\n\r\n    return [minx - off, miny - off, maxx - minx + 2 * off, maxy - miny + 2 * off] as [number, number, number, number];\r\n}\r\n\r\nexport function getViewbox(graphs: IGraph[], off = 2) {\r\n    let minx = Infinity;\r\n    let miny = Infinity;\r\n    let maxx = -Infinity;\r\n    let maxy = -Infinity;\r\n\r\n    graphs.forEach((g) => {\r\n        g.nodes.forEach((d) => {\r\n            minx = Math.min(minx, d.x);\r\n            miny = Math.min(miny, d.y);\r\n            maxx = Math.max(maxx, d.x);\r\n            maxy = Math.max(maxy, d.y);\r\n        });\r\n    });\r\n\r\n    return [minx - off, miny - off, maxx - minx + 2 * off, maxy - miny + 2 * off] as [number, number, number, number];\r\n}\r\n","import { observer } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nimport { getViewboxOfOne } from '../algorithms/viewbox';\r\nimport { useStore } from '../context';\r\n\r\ninterface IProps {\r\n    patterns: any;\r\n\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nconst Scatter: React.SFC<IProps> = observer((props) => {\r\n    const store = useStore();\r\n\r\n    const { patterns, width = 400, height = 400 } = props;\r\n\r\n    const style = {\r\n        border: 'silver 1px solid',\r\n        background: 'white',\r\n    };\r\n\r\n    const match = (pattern: { nodes: Array<{ label: string }> }) => {\r\n        const sset = store.patternStore.selectedPatternNodes;\r\n        if (!sset) {\r\n            return false;\r\n        }\r\n\r\n        const tset = new Set(pattern.nodes.map((d) => d.label));\r\n        let v = 0;\r\n        const slst = Array.from(sset);\r\n        for (const s of slst) {\r\n            if (tset.has(s)) {\r\n                ++v;\r\n            }\r\n        }\r\n\r\n        return v === sset.size && v === tset.size;\r\n    };\r\n\r\n    if (patterns) {\r\n        const points = patterns.map((p: any) => ({ x: p.coords[0], y: p.coords[1] }));\r\n        const vbox = getViewboxOfOne({ nodes: points }, 0.5);\r\n\r\n        const onHover = (p: any) => {\r\n            store.patternStore.setPatternHover(p.index);\r\n        };\r\n\r\n        const onUnHover = () => {\r\n            store.patternStore.setPatternHover(null);\r\n        };\r\n\r\n        const onClick = (p: any) => {\r\n            if (match(p)) {\r\n                store.patternStore.selectPattern(null);\r\n            } else {\r\n                store.patternStore.selectPattern(p);\r\n            }\r\n        };\r\n\r\n        const f0 = '#0094c8';\r\n        const f2 = '#d9a62e';\r\n        const f3 = '#96514d';\r\n\r\n        const elems = points.map((p: any, i: number) => {\r\n            const matched = match(patterns[i]);\r\n\r\n            return (\r\n                <circle\r\n                    key={p.index}\r\n                    cx={p.x}\r\n                    cy={p.y}\r\n                    r={0.15}\r\n                    stroke={f3}\r\n                    strokeWidth={i === store.patternStore.hoveredPattern ? 0.05 : 0}\r\n                    fill={matched ? f0 : f2}\r\n                    onMouseEnter={() => onHover(patterns[i])}\r\n                    onMouseLeave={onUnHover}\r\n                    onClick={() => onClick(patterns[i])}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <svg style={style} width={width} height={height} viewBox={vbox.join(' ')}>\r\n                <g>{elems}</g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    return <svg style={style} />;\r\n});\r\n\r\nexport default Scatter;\r\n","import * as d3 from 'd3';\r\nimport * as _ from 'lodash';\r\n\r\nexport function doLayout(g: any, iters = 50) {\r\n    g.nodes = _.map(g.features, (d: any, i: any) => {\r\n        return {\r\n            index: i,\r\n            label: d,\r\n        };\r\n    });\r\n\r\n    g.links = g.edges.map((e: any, i: number) => ({ index: i, source: e[0], target: e[1] }));\r\n\r\n    const sim = d3\r\n        .forceSimulation(g.nodes)\r\n        .force('charge', d3.forceManyBody())\r\n        .force('link', d3.forceLink(g.links))\r\n        .force('center', d3.forceCenter())\r\n        .stop();\r\n\r\n    for (let i = 0; i < iters; ++i) {\r\n        sim.tick();\r\n    }\r\n\r\n    return g;\r\n}\r\n","// Implementation: http://www.benfrederickson.com/multidimensional-scaling/\r\nimport numeric from 'numeric';\r\n\r\nfunction sqrEuDist(v1: number[], v2: number[]) {\r\n    let v = 0;\r\n    for (let i = 0; i < v1.length; ++i) {\r\n        v += (v1[i] - v2[i]) * (v1[i] - v2[i]);\r\n    }\r\n\r\n    return v;\r\n}\r\n\r\nfunction euDist(v1: number[], v2: number[]) {\r\n    return Math.sqrt(sqrEuDist(v1, v2));\r\n}\r\n\r\nexport function distances(mat: any) {\r\n    const res: number[][] = [];\r\n    for (let i = 0; i < mat.length; ++i) {\r\n        res[i] = [];\r\n    }\r\n\r\n    for (let i = 0; i < mat.length; ++i) {\r\n        res[i][i] = 0;\r\n        for (let j = i + 1; j < mat.length; ++j) {\r\n            res[i][j] = euDist(mat[i], mat[j]);\r\n            res[j][i] = res[i][j];\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport function mdsOnData(matrix: number[][], dimensions?: number) {\r\n    const dis = distances(matrix);\r\n    return mds(dis, dimensions);\r\n}\r\n\r\nexport function mds(distances: any, dimensions?: number) {\r\n    dimensions = dimensions || 2;\r\n\r\n    if (distances.length === 0) {\r\n        return [];\r\n    } else if (distances.length === 1) {\r\n        return [0.5, 0.5];\r\n    }\r\n\r\n    distances = numeric.mul(distances, 100);\r\n\r\n    const M = numeric.mul(numeric.pow(distances, 2), -0.5);\r\n\r\n    const mean = (A: any) => numeric.div(numeric.add.apply(null, A), A.length) as any;\r\n    const rowMeans = mean(M);\r\n    const colMeans = mean(numeric.transpose(M));\r\n    const totalMean = mean(rowMeans);\r\n\r\n    for (let i = 0; i < M.length; ++i) {\r\n        for (let j = 0; j < M[0].length; ++j) {\r\n            M[i][j] += totalMean - rowMeans[i] - colMeans[j];\r\n        }\r\n    }\r\n\r\n    const ret = numeric.svd(M);\r\n    const eigenValues = numeric.sqrt(ret.S);\r\n\r\n    return ret.U.map((row: any) => numeric.mul(row, eigenValues).splice(0, dimensions));\r\n}\r\n","import { doLayout } from './layout';\r\nimport { mdsOnData } from './mds';\r\nimport { getViewbox } from './viewbox';\r\n\r\nexport function processGraph(data) {\r\n    const coords2 = mdsOnData(data.features);\r\n    const subgs = data.subgs.map(doLayout);\r\n    const viewbox = getViewbox(subgs);\r\n\r\n    subgs.forEach((g: any, i: number) => {\r\n        g.index = i;\r\n        g.viewBox = viewbox;\r\n        g.feature = data.features[i];\r\n        g.coords = coords2[i];\r\n    });\r\n\r\n    return data;\r\n}\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://www.apoet.fun:9999/api';\r\n\r\nexport async function getGraphList() {\r\n    return await axios.get<string[]>(`${BASE_URL}/listGraphs`).then((data) => {\r\n        return data.data;\r\n    });\r\n}\r\n\r\nexport async function getGraph(graphName: string) {\r\n    return await axios.get(`${BASE_URL}/graph/${graphName}`).then((data) => {\r\n        return data.data;\r\n    });\r\n}\r\n\r\nexport async function getGraphData(graphName: string) {\r\n    const graph = await fetch(`data/${graphName}/graph.json`).then((res) => res.json());\r\n\r\n    const features = await fetch(`data/${graphName}/features.csv`)\r\n        .then((res) => res.text())\r\n        .then((res) => {\r\n            const lines = res.trim().split('\\n');\r\n            const fs: any[] = [];\r\n            for (let i = 1; i < lines.length; ++i) {\r\n                const fea = lines[i]\r\n                    .split(',')\r\n                    .slice(1)\r\n                    .map((v) => +v);\r\n                fs.push(fea);\r\n            }\r\n            return fs;\r\n        });\r\n\r\n    const { params: param, subgs: subgraphs } = await fetch(`data/${graphName}/desc.txt`)\r\n        .then((res) => res.text())\r\n        .then(async (res) => {\r\n            const params: any = {};\r\n            res.split('\\n').forEach((l) => {\r\n                const p = l.split(':');\r\n                params[p[0]] = p[1];\r\n            });\r\n\r\n            const subgs: any[] = [];\r\n            if (params.subgraphs !== undefined) {\r\n                for (let i = 0; i < +params.subgraphs; ++i) {\r\n                    const subg = await fetch(`data/${graphName}/${i}.json`).then((r) => r.json());\r\n                    subgs.push(subg);\r\n                }\r\n            }\r\n\r\n            return {\r\n                params,\r\n                subgs,\r\n            };\r\n        });\r\n\r\n    return {\r\n        graph,\r\n        features,\r\n        param,\r\n        subgraphs,\r\n    };\r\n}\r\n","import { observer } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nimport { useStore } from '../context';\r\n\r\nimport { Button, Col, Row, Select } from 'antd';\r\nimport { processGraph } from '../algorithms/pre-process';\r\nimport { getGraph, getGraphList } from '../local-server-api';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Header: React.FC = observer(() => {\r\n    const store = useStore();\r\n\r\n    const [sourceList, setSourceList] = React.useState<string[]>([]);\r\n    const [dataSource, setDataSource] = React.useState();\r\n\r\n    React.useEffect(() => {\r\n        getGraphList().then((d) => {\r\n            setSourceList(d);\r\n            if (d.length > 0) {\r\n                setDataSource(d[0]);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const loadData = React.useCallback(() => {\r\n        getGraph(dataSource).then((d) => {\r\n            store.setData(processGraph(d));\r\n        });\r\n    }, [dataSource, store.setData]);\r\n\r\n    const options = sourceList.map((d) => (\r\n        <Option key={d} value={d}>\r\n            {d}\r\n        </Option>\r\n    ));\r\n\r\n    return (\r\n        <Row gutter={16}>\r\n            <Col span={3}>\r\n                <Select style={{ width: 180 }} value={dataSource} onSelect={setDataSource}>\r\n                    {options}\r\n                </Select>\r\n            </Col>\r\n            <Col span={1}>\r\n                <Button type='primary' onClick={loadData}>\r\n                    Load\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default Header;\r\n","import { Col, Radio, Row, Slider, Switch } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport * as React from 'react';\r\nimport { useStore } from '../context';\r\n\r\nconst styles = {\r\n    switch: {\r\n        width: 60,\r\n    },\r\n    radio: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n    },\r\n};\r\n\r\nconst ControlPanel: React.SFC<{}> = observer(() => {\r\n    const { diagramStore, patternStore, graphData } = useStore();\r\n\r\n    const onChangeKernelValue = (e: any) => {\r\n        diagramStore.setContourRadius(e);\r\n    };\r\n\r\n    const onChangeTolerance = (e: any) => {\r\n        patternStore.setSearchTolerance(e);\r\n    };\r\n\r\n    const onChangeFilterMode = (e: any) => {\r\n        diagramStore.setFilterOutMode(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <h2>Graph info:</h2>\r\n                {graphData ? (\r\n                    <div>\r\n                        |V| = {graphData.nodes.length} |E| = {graphData.links.length}\r\n                    </div>\r\n                ) : null}\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col span={16}>\r\n                    <label>Diagram: </label>\r\n                </Col>\r\n                <Switch style={styles.switch} checked={diagramStore.showDiagram} checkedChildren='Show' onChange={diagramStore.setShowDiagram} />\r\n            </Row>\r\n            <Row>\r\n                <Col span={16}>\r\n                    <label>Contour: </label>\r\n                </Col>\r\n                <Switch style={styles.switch} checked={diagramStore.showContour} checkedChildren='Show' onChange={diagramStore.setShowContour} />\r\n            </Row>\r\n            <Row>\r\n                <Col span={16}>\r\n                    <label>Edges in diagram: </label>\r\n                </Col>\r\n                <Switch style={styles.switch} checked={diagramStore.showDiagramEdge} checkedChildren='Show' onChange={diagramStore.setShowDiagramEdge} />\r\n            </Row>\r\n\r\n            <Row>\r\n                <h3>Filter mode:</h3>\r\n\r\n                <Radio.Group onChange={onChangeFilterMode} value={diagramStore.filterOutMode}>\r\n                    <Radio style={styles.radio} value={0}>\r\n                        No filter\r\n                    </Radio>\r\n                    <Radio style={styles.radio} value={1}>\r\n                        Filter by common nodes\r\n                    </Radio>\r\n                    <Radio style={styles.radio} value={2}>\r\n                        Filter by pattern\r\n                    </Radio>\r\n                </Radio.Group>\r\n            </Row>\r\n            <hr />\r\n\r\n            <h3>Parameters:</h3>\r\n            <label> Contour radius: </label>\r\n            <Slider min={0} max={500} value={diagramStore.contour.kernelRadius} onChange={onChangeKernelValue} />\r\n\r\n            <label> Search tolerance: </label>\r\n            <Slider min={0} max={1} step={0.05} value={patternStore.searchTolerance} onChange={onChangeTolerance} />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ControlPanel;\r\n","import * as d3 from 'd3';\nimport { observer } from 'mobx-react';\nimport React from 'react';\n\nexport interface IProps {\n    pattern?: any;\n\n    width?: number;\n    height?: number;\n\n    radius?: number;\n\n    showLabel?: boolean;\n\n    showEdge?: boolean;\n\n    colorMapping?: string | ((d: any) => string);\n\n    background?: string;\n\n    viewPort: [number, number, number, number];\n\n    onClickNode?: (d: any) => void;\n}\n\nconst PatternDetailDiagram: React.SFC<IProps> = ({\n    pattern,\n    showLabel,\n    showEdge,\n    width,\n    height,\n    viewPort,\n    background,\n    colorMapping,\n    onClickNode,\n    radius = 5,\n}) => {\n    let graphContent = <g />;\n\n    const clickableSty = {\n        cursor: onClickNode ? 'pointer' : 'default',\n    };\n\n    const onClick = React.useCallback(\n        (nd: any) => {\n            if (onClickNode) {\n                onClickNode(nd);\n            }\n        },\n        [onClickNode],\n    );\n\n    const svgRef = React.useRef(null);\n\n    if (pattern) {\n        const fill = colorMapping === undefined ? 'orange' : colorMapping;\n\n        const getFill = (d: any) => {\n            if (typeof fill === 'string') {\n                return fill;\n            } else {\n                return fill(d);\n            }\n        };\n\n        const nodeElements = pattern.nodes.map((d: any) => {\n            return (\n                <circle style={clickableSty} key={`n${d.index}`} cx={d.x} cy={d.y} r={radius} fill={getFill(d)} onClick={() => onClick(d)}>\n                    <title>{d.label}</title>\n                </circle>\n            );\n        });\n\n        const nodeGroup = <g className='nodes'>{nodeElements}</g>;\n\n        let labelGroup: any = null;\n        if (showLabel) {\n            const labelElements = pattern.nodes.map((d: any) => {\n                return (\n                    <text key={`l${d.index}`} x={d.x} y={d.y}>\n                        {d.label}\n                    </text>\n                );\n            });\n\n            labelGroup = <g className='labels'>{labelElements}</g>;\n        }\n\n        let edgeGroup: any = null;\n        if (showEdge) {\n            const edgeElements = pattern.links.map((e: any) => {\n                const u = e.source;\n                const v = e.target;\n\n                return <line key={`e${e.index}`} x1={u.x} y1={u.y} x2={v.x} y2={v.y} strokeWidth={0.3} stroke={'darkgrey'} strokeOpacity={0.9} />;\n            });\n\n            edgeGroup = <g className='edges'>{edgeElements}</g>;\n        }\n\n        graphContent = (\n            <g className='content'>\n                {edgeGroup}\n                {nodeGroup}\n                {labelGroup}\n            </g>\n        );\n    }\n\n    const viewBox = viewPort.join(' ');\n    const sty: any = {\n        display: 'inline-block',\n        margin: '0 auto',\n        width: `${width}px`,\n        height: `${height}px`,\n    };\n\n    if (background !== undefined) {\n        sty.background = background;\n    }\n\n    return (\n        <svg style={sty} viewBox={viewBox} ref={svgRef}>\n            {graphContent}\n        </svg>\n    );\n};\n\nexport default observer(PatternDetailDiagram);\n","import { observer } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nimport PatternDetailDiagram from '../components/PatternDetailDiagram';\r\nimport { useStore } from '../context';\r\n\r\ninterface IProps {\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nconst DetailView: React.SFC<IProps> = observer((props: IProps) => {\r\n    const store = useStore();\r\n\r\n    const { width = 500, height = 500 } = props;\r\n\r\n    const nodeColor = store.nodeColorMapper;\r\n\r\n    const onClick = React.useCallback(\r\n        (d: any) => {\r\n            if (store.detailStore.selectedNodes === d) {\r\n                store.detailStore.setSelectedNodes([]);\r\n            } else {\r\n                store.detailStore.setSelectedNodes([d]);\r\n            }\r\n        },\r\n        [store],\r\n    );\r\n\r\n    const sty = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    } as any;\r\n\r\n    return (\r\n        <div style={sty}>\r\n            <label>Similar subgraphs: {store.detailStore.hits}</label>\r\n            {store.detailStore.pattern ? (\r\n                <PatternDetailDiagram\r\n                    pattern={store.detailStore.pattern}\r\n                    showLabel={true}\r\n                    showEdge={true}\r\n                    width={width}\r\n                    height={height}\r\n                    colorMapping={nodeColor}\r\n                    onClickNode={onClick}\r\n                    viewPort={store.detailStore.pattern.viewBox}\r\n                />\r\n            ) : (\r\n                <svg width={width} height={height} />\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default DetailView;\r\n","import * as THREE from 'three';\r\nimport { IContourSceneData, IDot } from '../../models/contour';\r\n\r\nconst vShader = `\r\nvarying vec3 offxy_intz;\r\n\r\nvoid main() {\r\n    offxy_intz = vec3(2.0 * (uv - vec2(.5, .5)), position.z);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 1.0, 1.0);\r\n}\r\n`;\r\n\r\nconst fShader = `\r\nprecision highp float;\r\n\r\nvarying vec3 offxy_intz;\r\n\r\nvoid main() {\r\n    vec2 off = offxy_intz.xy;\r\n\r\n    float intensity = offxy_intz.z;\r\n\r\n    float decay = (1.0 - smoothstep(0.0, 1.0, length(off)));\r\n\r\n    // gl_FragColor = vec4(0.0);\r\n    gl_FragColor = vec4(intensity * decay);\r\n}\r\n`;\r\n\r\nfunction createDotBufferGeometry(data: IDot[], r: number) {\r\n    const geom = new THREE.BufferGeometry();\r\n\r\n    const vertices: number[] = [];\r\n    const uvs: number[] = [];\r\n    const indices: number[] = [];\r\n\r\n    data.forEach((d, i) => {\r\n        const idx = i * 4;\r\n        const { x, y, intensity = 1 } = d;\r\n\r\n        vertices.push(x - r, y - r, intensity);\r\n        vertices.push(x - r, y + r, intensity);\r\n        vertices.push(x + r, y + r, intensity);\r\n        vertices.push(x + r, y - r, intensity);\r\n\r\n        uvs.push(0, 1);\r\n        uvs.push(0, 0);\r\n        uvs.push(1, 0);\r\n        uvs.push(1, 1);\r\n\r\n        // C.W.\r\n        indices.push(idx + 1, idx + 0, idx + 2);\r\n        indices.push(idx + 0, idx + 3, idx + 2);\r\n    });\r\n\r\n    geom.setIndex(indices);\r\n    geom.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n    geom.addAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n\r\n    return geom;\r\n}\r\n\r\nconst material = new THREE.ShaderMaterial({\r\n    vertexShader: vShader,\r\n    fragmentShader: fShader,\r\n    blending: THREE.CustomBlending,\r\n    blendSrc: THREE.OneFactor,\r\n    blendDst: THREE.OneFactor,\r\n});\r\n\r\nexport function createContourMesh(data: IDot[], r: number): THREE.Mesh {\r\n    const geom = createDotBufferGeometry(data, r);\r\n\r\n    geom.computeBoundingBox();\r\n\r\n    return new THREE.Mesh(geom, material);\r\n}\r\n\r\nfunction adjustCamera(vbox: [number, number, number, number]) {\r\n    if (vbox[2] > vbox[3]) {\r\n        const delta = vbox[2] - vbox[3];\r\n        return [vbox[0], vbox[0] + vbox[2], vbox[1] + vbox[3] + 0.5 * delta, vbox[1] - 0.5 * delta];\r\n    } else {\r\n        const delta = vbox[3] - vbox[2];\r\n        return [vbox[0] - 0.5 * delta, vbox[0] + vbox[2] + 0.5 * delta, vbox[1] + vbox[3], vbox[1]];\r\n    }\r\n}\r\n\r\nexport function createContourSceneData(data: IDot[], r: number, vbox: [number, number, number, number]): IContourSceneData {\r\n    const mesh = createContourMesh(data, r);\r\n\r\n    const cambox = adjustCamera(vbox);\r\n\r\n    const camera = new THREE.OrthographicCamera(cambox[0], cambox[1], cambox[2], cambox[3], 1, 10);\r\n    camera.position.set(0, 0, 2);\r\n\r\n    return {\r\n        mesh,\r\n        camera,\r\n    };\r\n}\r\n","import * as THREE from 'three';\r\nimport { IContourSceneData } from '../../models/contour';\r\n\r\nexport default class HeightCalculator {\r\n    private rt!: THREE.WebGLRenderTarget;\r\n\r\n    constructor(private sizeX: number, private sizeY: number, private renderer: THREE.WebGLRenderer) {\r\n        this.init();\r\n    }\r\n\r\n    calculate({ mesh, camera }: IContourSceneData) {\r\n        this.renderer.setRenderTarget(this.rt);\r\n        this.renderer.setClearColor('#000000', 0);\r\n\r\n        const bufferScene = new THREE.Scene();\r\n        bufferScene.add(mesh);\r\n        bufferScene.add(camera);\r\n\r\n        this.renderer.clearTarget(this.rt, true, false, false);\r\n        this.renderer.render(bufferScene, camera, this.rt, false);\r\n    }\r\n\r\n    getRenderTarget(): THREE.WebGLRenderTarget {\r\n        return this.rt;\r\n    }\r\n\r\n    private init() {\r\n        if (!this.renderer.extensions.get('OES_texture_float')) {\r\n            console.error('No OES_texture_float support for float textures.');\r\n            return false;\r\n        }\r\n        if (this.renderer.capabilities.maxVertexTextures === 0) {\r\n            console.error('No support for vertex shader textures.');\r\n            return false;\r\n        }\r\n\r\n        this.rt = new THREE.WebGLRenderTarget(this.sizeX, this.sizeY, {\r\n            wrapS: THREE.ClampToEdgeWrapping,\r\n            wrapT: THREE.ClampToEdgeWrapping,\r\n            minFilter: THREE.NearestFilter,\r\n            magFilter: THREE.NearestFilter,\r\n            format: THREE.RGBAFormat,\r\n            type: THREE.FloatType,\r\n            stencilBuffer: false,\r\n            depthBuffer: false,\r\n        });\r\n\r\n        return null;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { IContourSceneData } from '../../models/contour';\r\nimport HeightCalculator from './heightmap-calculator';\r\n\r\nexport default class StopCalculator {\r\n    static readonly SampleSize = 64;\r\n\r\n    hCalc!: HeightCalculator;\r\n\r\n    minInterval: number = 0.01;\r\n\r\n    buffer = new Float32Array(StopCalculator.SampleSize * StopCalculator.SampleSize * 4);\r\n\r\n    constructor(private renderer: THREE.WebGLRenderer) {\r\n        this.init();\r\n    }\r\n\r\n    calculate(data: IContourSceneData, fracs: number[]) {\r\n        this.hCalc.calculate(data);\r\n\r\n        const ss = StopCalculator.SampleSize;\r\n\r\n        this.renderer.readRenderTargetPixels(this.hCalc.getRenderTarget(), 0, 0, ss, ss, this.buffer);\r\n\r\n        return this.pickStops(fracs);\r\n    }\r\n\r\n    calculateMax(data: IContourSceneData) {\r\n        this.hCalc.calculate(data);\r\n\r\n        const ss = StopCalculator.SampleSize;\r\n\r\n        this.renderer.readRenderTargetPixels(this.hCalc.getRenderTarget(), 0, 0, ss, ss, this.buffer);\r\n\r\n        return this.maxVal();\r\n    }\r\n\r\n    private maxVal() {\r\n        const arr = this.buffer.filter((v, i) => v >= 0.5 && i % 4 === 0);\r\n\r\n        if (arr.length > 0) {\r\n            let mv = this.minInterval;\r\n            arr.forEach((v) => (mv = Math.max(mv, v)));\r\n\r\n            return mv;\r\n        } else {\r\n            return this.minInterval;\r\n        }\r\n    }\r\n\r\n    private pickStops(fracs: number[]) {\r\n        let res = fracs.map(() => 1);\r\n\r\n        const arr = this.buffer.filter((v, i) => v >= 0.5 && i % 4 === 0);\r\n\r\n        if (arr.length > 0) {\r\n            const len = arr.length;\r\n\r\n            arr.sort((a, b) => a - b);\r\n            const maxVal = Math.max(1, arr[len - 1]);\r\n\r\n            res = fracs.map((v, i) => {\r\n                const index = Math.round(v * len);\r\n                return index >= 0 && index < len ? arr[index] : maxVal;\r\n            });\r\n        }\r\n\r\n        for (let i = 1; i < fracs.length; ++i) {\r\n            res[i] = Math.max(res[i], res[i - 1] + this.minInterval);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    private init() {\r\n        const ss = StopCalculator.SampleSize;\r\n\r\n        this.hCalc = new HeightCalculator(ss, ss, this.renderer);\r\n\r\n        return null;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { IContourParam } from '../../components/Contour';\r\nimport { IDot } from '../../models/contour';\r\nimport { createContourSceneData } from './contour-mesh-helpers';\r\nimport HeightCalculator from './heightmap-calculator';\r\nimport StopCalculator from './stop-calculator';\r\n\r\nconst vShader = `\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = vec2(uv.x, 1.0 - uv.y);\r\n\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n\r\nconst fShaderBase = `\r\nprecision highp float;\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D hmap;\r\n\r\nuniform sampler2D bmap;\r\n\r\nvoid main() {\r\n    float val = texture2D(hmap, vUv).x;\r\n\r\n    vec4 oriColor = texture2D(bmap, vec2(vUv.x, 1.0 - vUv.y));\r\n\r\n    vec4 col = vec4(.0);\r\n\r\n    if (val >= .0) {\r\n        // col = mix(vec4(.0), contour, val / maxval);\r\n        col = getColor(val);\r\n    }\r\n\r\n    gl_FragColor = oriColor + col;\r\n}\r\n`;\r\n\r\nconst copyShader = `\r\nprecision highp float;\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(tex, vec2(vUv.x, 1.0 - vUv.y));\r\n}\r\n`;\r\n\r\nexport class ContourBlurer {\r\n    public heightmapCalculator!: HeightCalculator;\r\n\r\n    public NSTOPS: number = 7;\r\n    public stopCalculator!: StopCalculator;\r\n    public stops: number[] = [0, 0, 0, 0, 0];\r\n\r\n    private rt!: THREE.WebGLRenderTarget;\r\n\r\n    private tmpRt!: THREE.WebGLRenderTarget;\r\n    private tmpMesh!: THREE.Mesh;\r\n\r\n    private mesh!: THREE.Mesh;\r\n    private camera!: THREE.Camera;\r\n\r\n    constructor(private sizeX: number, private sizeY: number, private renderer: THREE.WebGLRenderer) {\r\n        this.init();\r\n    }\r\n\r\n    public draw(data: IDot[], vbox: [number, number, number, number], param: IContourParam) {\r\n        const bufferScene = new THREE.Scene();\r\n        bufferScene.add(this.mesh);\r\n\r\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 10);\r\n        this.camera.position.set(0, 0, 2);\r\n\r\n        bufferScene.add(this.camera);\r\n\r\n        const contourSceneData = createContourSceneData(data, param.kernelRadius, vbox);\r\n\r\n        this.stops = this.stopCalculator.calculate(contourSceneData, param.levels.map((d) => d.frac));\r\n\r\n        this.renderer.setClearColor('#000000', 0);\r\n        this.renderer.clearTarget(this.rt, true, false, false);\r\n        this.renderer.autoClear = false;\r\n\r\n        this.renderer.setRenderTarget(this.tmpRt);\r\n        this.renderer.clearColor();\r\n\r\n        if (data.length > 0) {\r\n            const sceneData = createContourSceneData(data, param.kernelRadius, vbox);\r\n            this.heightmapCalculator.calculate(sceneData);\r\n\r\n            const material = this.mesh.material as THREE.ShaderMaterial;\r\n\r\n            material.uniforms.hmap.value = this.heightmapCalculator.getRenderTarget().texture;\r\n            material.uniforms.bmap.value = this.tmpRt.texture;\r\n\r\n            for (let i = 0; i < this.NSTOPS; ++i) {\r\n                material.uniforms[`contour${i}`].value = param.levels[i].color;\r\n                material.uniforms[`stops${i}`].value = this.stops[i];\r\n            }\r\n\r\n            this.renderer.setRenderTarget(this.rt);\r\n            this.renderer.autoClear = false;\r\n            this.renderer.render(bufferScene, this.camera, this.rt, false);\r\n\r\n            const tmpScene = new THREE.Scene();\r\n            tmpScene.add(this.tmpMesh);\r\n\r\n            const tmpCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 10);\r\n            tmpCamera.position.set(0, 0, 2);\r\n\r\n            tmpScene.add(this.tmpMesh);\r\n            tmpScene.add(tmpCamera);\r\n\r\n            this.renderer.render(tmpScene, tmpCamera, this.tmpRt, true);\r\n        }\r\n    }\r\n\r\n    public getRenderTarget() {\r\n        return this.tmpRt;\r\n    }\r\n\r\n    private init() {\r\n        this.rt = new THREE.WebGLRenderTarget(this.sizeX, this.sizeY);\r\n        this.tmpRt = new THREE.WebGLRenderTarget(this.sizeX, this.sizeY);\r\n\r\n        this.renderer.clearTarget(this.rt, true, true, true);\r\n\r\n        const defs: any[] = [];\r\n        for (let i = 0; i < this.NSTOPS; ++i) {\r\n            defs.push(`uniform vec4 contour${i};`);\r\n            defs.push(`uniform float stops${i};`);\r\n        }\r\n\r\n        const trans: any[] = [];\r\n        for (let i = this.NSTOPS - 1; i > 0; --i) {\r\n            trans.push(`if (val >= stops${i}) return contour${i};`);\r\n        }\r\n\r\n        const getColorFunc = `\r\n        vec4 getColor(float val) {\r\n            ${trans.join('\\n')}\r\n            else {\r\n                return vec4(1.0, 1.0, 1.0, 1.0);\r\n            }\r\n        }\r\n        `;\r\n\r\n        const fShaderCode = `\r\n        precision highp float;\r\n        ${defs.join('\\n')}\r\n        ${getColorFunc}\r\n        ${fShaderBase}\r\n        `;\r\n\r\n        const uniforms: any = {\r\n            hmap: { value: 1 },\r\n            bmap: { value: this.tmpRt.texture },\r\n        };\r\n        for (let i = 0; i < this.NSTOPS; ++i) {\r\n            uniforms[`contour${i}`] = { value: [0, 0, 0, 0] };\r\n            uniforms[`stops${i}`] = { value: 1 };\r\n        }\r\n\r\n        const geom = new THREE.PlaneGeometry(2, 2);\r\n\r\n        this.mesh = new THREE.Mesh(\r\n            geom,\r\n            new THREE.ShaderMaterial({\r\n                vertexShader: vShader,\r\n                fragmentShader: fShaderCode,\r\n                uniforms,\r\n            }),\r\n        );\r\n\r\n        const uniforms2: any = {\r\n            tex: { value: this.rt.texture },\r\n        };\r\n\r\n        this.tmpMesh = new THREE.Mesh(\r\n            geom,\r\n            new THREE.ShaderMaterial({\r\n                vertexShader: vShader,\r\n                fragmentShader: copyShader,\r\n                uniforms: uniforms2,\r\n            }),\r\n        );\r\n\r\n        this.heightmapCalculator = new HeightCalculator(this.sizeX, this.sizeY, this.renderer);\r\n        this.stopCalculator = new StopCalculator(this.renderer);\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport * as THREE from 'three';\r\nimport { ContourBlurer } from '../algorithms/contour/contour-blur';\r\nimport { IDot } from '../models/contour';\r\n\r\nexport interface IContourLevel {\r\n    frac: number;\r\n    color: number[];\r\n}\r\n\r\nexport interface IContourParam {\r\n    levels: IContourLevel[];\r\n    kernelRadius: number;\r\n}\r\n\r\nexport interface IContourProps {\r\n    data: IDot[];\r\n    width: number;\r\n    height: number;\r\n\r\n    vbox: [number, number, number, number];\r\n\r\n    param: IContourParam;\r\n}\r\n\r\nexport default class Contour extends React.Component<IContourProps, any> {\r\n    public refs!: {\r\n        viewCanvas: HTMLCanvasElement;\r\n    };\r\n\r\n    public scene!: THREE.Scene;\r\n    public camera!: THREE.Camera;\r\n    public mesh!: THREE.Mesh;\r\n    public renderer!: THREE.WebGLRenderer;\r\n\r\n    public frameId?: number;\r\n\r\n    public blurer!: ContourBlurer;\r\n\r\n    public componentDidMount() {\r\n        this.setupRenderer();\r\n        this.setupCalculator();\r\n        this.setupScene();\r\n\r\n        this.updateScene(this.props);\r\n\r\n        this.updateFrame();\r\n    }\r\n\r\n    public setupScene() {\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 10);\r\n        this.camera.position.set(0, 0, 2);\r\n\r\n        this.scene.add(this.camera);\r\n\r\n        const geom = new THREE.PlaneGeometry(2, 2);\r\n        const material = new THREE.MeshBasicMaterial({\r\n            map: this.blurer.getRenderTarget().texture,\r\n        });\r\n        this.mesh = new THREE.Mesh(geom, material);\r\n        this.scene.add(this.mesh);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.frameId !== undefined) {\r\n            cancelAnimationFrame(this.frameId);\r\n            if (this.renderer && this.scene && this.camera) {\r\n                this.renderer.render(this.scene, this.camera);\r\n            }\r\n        }\r\n        if (this.mesh) {\r\n            if (this.scene) {\r\n                this.scene.remove(this.mesh);\r\n            }\r\n            this.mesh.geometry.dispose();\r\n        }\r\n        this.renderer.dispose();\r\n    }\r\n\r\n    public componentWillUpdate(props: IContourProps, state: any) {\r\n        this.updateScene(props);\r\n    }\r\n\r\n    public setupRenderer() {\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            canvas: this.refs.viewCanvas,\r\n        });\r\n        this.renderer.setClearColor('#FFFFFF', 1);\r\n        this.renderer.clear();\r\n\r\n        this.renderer.setClearColor('#000000', 0);\r\n    }\r\n\r\n    public setupCalculator() {\r\n        this.blurer = new ContourBlurer(this.props.width, this.props.height, this.renderer);\r\n    }\r\n\r\n    public updateFrame() {\r\n        this.frameId = requestAnimationFrame(this.updateFrame.bind(this));\r\n\r\n        this.renderer.setRenderTarget(undefined);\r\n        this.renderer.setClearColor('#ffffff', 1);\r\n        this.renderer.clear();\r\n        if (this.renderer && this.scene && this.props.data.length > 0) {\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { width, height } = this.props;\r\n\r\n        const sty = {\r\n            // width: '100%',\r\n            // height: '100%',\r\n        };\r\n\r\n        const onWheel = (e: any) => {\r\n            console.log(e);\r\n        };\r\n\r\n        return <canvas style={sty} width={width} height={height} onWheel={onWheel} ref='viewCanvas' />;\r\n    }\r\n\r\n    private updateScene({ data, vbox, param }: IContourProps) {\r\n        if (data === undefined || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.blurer.draw(data, vbox, param);\r\n    }\r\n}\r\n","import { useStore } from '../context';\r\nimport Contour from './Contour';\r\n\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nimport { getViewboxOfOne } from '../algorithms/viewbox';\r\nimport { IDot } from '../models/contour';\r\n\r\nconst levels = [\r\n    {\r\n        frac: 0,\r\n        color: [0.57, 0.8, 0.93, 0.5],\r\n    },\r\n    {\r\n        frac: 0.25,\r\n        color: [0.57, 0.8, 0.93, 0.75],\r\n    },\r\n    {\r\n        frac: 0.4,\r\n        color: [0.33, 0.66, 1.0, 0.75],\r\n    },\r\n    {\r\n        frac: 0.55,\r\n        color: [0.22, 0.55, 1.0, 0.8],\r\n    },\r\n    {\r\n        frac: 0.7,\r\n        color: [0.17, 0.44, 0.78, 0.85],\r\n    },\r\n    {\r\n        frac: 0.95,\r\n        color: [0.14, 0.29, 0.61, 0.85],\r\n    },\r\n    {\r\n        frac: 0.99,\r\n        color: [0.12, 0.24, 0.47, 0.9],\r\n    },\r\n];\r\ninterface IProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst ContourContainer: React.SFC<IProps> = (props: IProps) => {\r\n    const store = useStore();\r\n    const { width, height } = props;\r\n\r\n    const data = store.graphData;\r\n    const dots: IDot[] = [];\r\n\r\n    const param = {\r\n        levels,\r\n        kernelRadius: store.diagramStore.contour.kernelRadius,\r\n    };\r\n\r\n    if (data) {\r\n        data.nodes.forEach((d: any) => {\r\n            if (!store.patternStore.selectedPatternNodes || store.patternStore.selectedPatternNodes.has(d.label)) {\r\n                dots.push({\r\n                    x: d.x,\r\n                    y: d.y,\r\n                    intensity: 1,\r\n                });\r\n            }\r\n        });\r\n\r\n        const vbox = getViewboxOfOne(store.graphData);\r\n        return <Contour data={dots} param={param} width={width} height={height} vbox={vbox} />;\r\n    } else {\r\n        return <Contour data={[]} param={param} width={width} height={height} vbox={[0, 1, 0, 1]} />;\r\n    }\r\n};\r\n\r\nexport default observer(ContourContainer);\r\n","import { observer } from 'mobx-react';\r\nimport React, { CSSProperties } from 'react';\r\nimport ContourContainer from '../components/ContourContainer';\r\n\r\nimport { getViewboxOfOne } from '../algorithms/viewbox';\r\nimport PatternDiagram from '../components/PatternDiagram';\r\nimport { useStore } from '../context';\r\n\r\ninterface IProps {\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nconst DiagramView: React.SFC<IProps> = observer((props: IProps) => {\r\n    const store = useStore();\r\n\r\n    const { width = 800, height = 800 } = props;\r\n\r\n    const nodeColor = store.nodeColorMapper;\r\n\r\n    const back = {\r\n        width,\r\n        height,\r\n        overflow: 'visible',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    } as CSSProperties;\r\n    const front = {\r\n        width,\r\n        height,\r\n        overflow: 'visible',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        zIndex: 999,\r\n    } as CSSProperties;\r\n\r\n    const sty = {\r\n        height,\r\n        width,\r\n        position: 'relative',\r\n    } as CSSProperties;\r\n\r\n    const g = { nodes: [], links: [] };\r\n    if (store.graphData) {\r\n        g.nodes = store.graphData.nodes;\r\n        g.links = store.graphEdgeArrayCopy;\r\n        if (store.diagramStore.filterOutMode && store.patternStore.selectedPatternNodes !== null) {\r\n            if (store.diagramStore.filterOutMode === 1 && store.patternStore.selectedPatternNodes !== null) {\r\n                const st = store.patternStore.selectedPatternNodes as Set<string>;\r\n                g.nodes = g.nodes.filter((d: any) => st.has(d.label));\r\n                g.links = g.links.filter((e: any) => st.has(e.source.label) && st.has(e.target.label));\r\n            } else if (store.diagramStore.filterOutMode === 2 && store.patternStore.searchSubgraphNodes !== null) {\r\n                const st = store.patternStore.searchSubgraphNodes as Set<number>;\r\n                g.nodes = g.nodes.filter((d: any) => st.has(d.index));\r\n                g.links = g.links.filter((e: any) => st.has(e.source.index) && st.has(e.target.index));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={sty}>\r\n            <div style={back}>{store.diagramStore.showContour ? <ContourContainer width={width} height={height} /> : null}</div>\r\n            <div style={front}>\r\n                {store.diagramStore.showDiagram && store.graphData ? (\r\n                    <PatternDiagram\r\n                        pattern={g}\r\n                        showEdge={store.diagramStore.showDiagramEdge}\r\n                        colorMapping={nodeColor}\r\n                        width={width}\r\n                        height={height}\r\n                        radius={10}\r\n                        viewPort={getViewboxOfOne(store.graphData)}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default DiagramView;\r\n","import { toJS } from 'mobx';\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n    title: string;\r\n    children: React.ReactNode;\r\n    theme: any;\r\n}\r\n\r\nconst Panel: React.SFC<IProps> = (props: IProps) => {\r\n    const { title, children } = props;\r\n\r\n    const { styles } = props.theme;\r\n\r\n    const hrSty = {\r\n        color: '#fff',\r\n        boxShadow: '#ccc 0 1px 5px',\r\n    };\r\n\r\n    const sty = {\r\n        width: 'fit-content',\r\n        height: 'fit-content',\r\n        ...styles.panel,\r\n    };\r\n\r\n    return (\r\n        <div style={sty}>\r\n            <h2 style={toJS(styles.panelTitle)}>{title}</h2>\r\n            <hr style={hrSty} />\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Panel;\r\n","import { toJS } from 'mobx';\r\nimport React from 'react';\r\n\r\nimport { Layout } from 'antd';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport PatternList from '../components/PatternList';\r\n\r\nimport Scatter from '../components/Scatter';\r\n\r\nimport AppHeader from '../components/AppHeader';\r\nimport ControlPanel from '../components/ControlPanel';\r\nimport DetailView from '../views/DetailView';\r\nimport DiagramView from '../views/DiagramView';\r\n\r\nimport Panel from '../components/Panel';\r\n\r\nimport { useStore } from '../context';\r\n\r\nconst { Header, Content } = Layout;\r\n\r\nconst Visualization: React.SFC<{}> = observer(() => {\r\n    const store = useStore();\r\n\r\n    return (\r\n        <div className='App'>\r\n            <Header style={toJS(store.theme.styles.headers)}>\r\n                <AppHeader />\r\n            </Header>\r\n            <Content style={{ display: 'flex', flexWrap: 'wrap', flexDirection: 'column' }}>\r\n                <Panel title='Diagram view' theme={store.theme}>\r\n                    <DiagramView width={750} height={750} />\r\n                </Panel>\r\n                <Panel title='Patterns' theme={store.theme}>\r\n                    <div style={{ width: 380, height: 750, overflow: 'auto' }}>\r\n                        <PatternList patterns={store.patternStore.subgraphs} width={90} height={90} />\r\n                    </div>\r\n                </Panel>\r\n                <Panel title='Pattern Relations' theme={store.theme}>\r\n                    <Scatter patterns={store.patternStore.subgraphs} width={350} height={350} />\r\n                </Panel>\r\n                <Panel title='Detail' theme={store.theme}>\r\n                    <DetailView width={350} height={280} />\r\n                </Panel>\r\n                <Panel title='Settings' theme={store.theme}>\r\n                    <div style={{ width: 240 }}>\r\n                        <ControlPanel />\r\n                    </div>\r\n                </Panel>\r\n            </Content>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Visualization;\r\n","import React from 'react';\r\nimport { hot } from 'react-hot-loader/root';\r\nimport './App.css';\r\n\r\nimport { StoreProvider } from './context';\r\nimport Visualization from './views/Visualization';\r\n\r\nconst App: React.SFC<{}> = () => {\r\n    return (\r\n        <div className='App'>\r\n            <StoreProvider>\r\n                <Visualization />\r\n            </StoreProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (process.env.NODE_ENV === 'development' ? hot(App) : App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { configure } from 'mobx';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}